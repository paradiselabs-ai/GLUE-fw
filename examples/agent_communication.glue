glue app {
    name = "Agent Communication Example"
    description = "Demonstrates agent-to-agent communication in GLUE"
    version = "0.1.0"
    config {
        development = true
    }
}

// Define models
model researcher {
    provider = openrouter
    role = "Researcher who finds information and communicates with other models"
    adhesives = [glue, velcro]
    config {
        model = "meta-llama/llama-3.3-70b-instruct:free"
    }
}

model assistant {
    provider = openrouter
    role = "Assistant who helps organize information and communicates with other models"
    adhesives = [glue, velcro]
    config {
        model = "meta-llama/llama-3.3-70b-instruct:free"
    }
}

model writer {
    provider = openrouter
    role = "Writer who creates content and communicates with other models"
    adhesives = [glue, velcro]  
    config {
        model = "meta-llama/llama-3.3-70b-instruct:free"
    }
}

model editor {
    provider = openrouter
    role = "Editor who reviews and improves content and communicates with other models"
    adhesives = [glue, velcro]
    config {
        model = "meta-llama/llama-3.3-70b-instruct:free"
    }
}

// Define tools
tool web_search {
    provider = serp
    config {
        max_results = 5
    }
}

tool file_handler {
    description = "Read and write files"
}

tool code_interpreter {
    description = "Execute Python code"
}

tool communicate {
    description = "Communicate with other models and teams"
}

// Define teams and flows
magnetize {
    research {
        lead = researcher
        members = [assistant]
        tools = [web_search, code_interpreter, communicate]
    }
    
    docs {
        lead = writer
        members = [editor]
        tools = [file_handler, communicate]
    }
    
    flow {
        research >< docs  // Bidirectional flow
    }
}


apply glue
